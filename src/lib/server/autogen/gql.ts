/* eslint-disable */
import * as graphql from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

const documents = {
    "fragment Breadcrumb_breadcrumbList on StoreBreadcrumbList {\n  itemListElement {\n    item\n    name\n    position\n  }\n}": graphql.Breadcrumb_BreadcrumbListFragmentDoc,
    "fragment ProductDetails_product on StoreProduct {\n  id: productID\n  sku\n  name\n  gtin\n  description\n  isVariantOf {\n    productGroupID\n    name\n  }\n  image {\n    url\n    alternateName\n  }\n  brand {\n    name\n  }\n  offers {\n    lowPrice\n    offers {\n      availability\n      price\n      listPrice\n      seller {\n        identifier\n      }\n    }\n  }\n  breadcrumbList {\n    ...Breadcrumb_breadcrumbList\n  }\n  additionalProperty {\n    propertyID\n    name\n    value\n    valueReference\n  }\n}": graphql.ProductDetails_ProductFragmentDoc,
    "\n  query GetProduct($locator: [IStoreSelectedFacet!]!) {\n    product(locator: $locator) {\n      id: productID\n\n      seo {\n        title\n        description\n        canonical\n      }\n\n      breadcrumbList {\n        itemListElement {\n          item\n          name\n          position\n        }\n      }\n\n      brand {\n        name\n      }\n\n      sku\n      gtin\n      name\n      description\n\n      image {\n        url\n        alternateName\n      }\n\n      offers {\n        lowPrice\n        highPrice\n        priceCurrency\n        offers {\n          availability\n          price\n          priceValidUntil\n          priceCurrency\n          itemCondition\n          seller {\n            identifier\n          }\n        }\n      }\n\n      isVariantOf {\n        productGroupID\n      }\n\n      ...ProductDetails_product\n    }\n  }\n": graphql.GetProductDocument,
};

export function gql(source: "fragment Breadcrumb_breadcrumbList on StoreBreadcrumbList {\n  itemListElement {\n    item\n    name\n    position\n  }\n}"): (typeof documents)["fragment Breadcrumb_breadcrumbList on StoreBreadcrumbList {\n  itemListElement {\n    item\n    name\n    position\n  }\n}"];
export function gql(source: "fragment ProductDetails_product on StoreProduct {\n  id: productID\n  sku\n  name\n  gtin\n  description\n  isVariantOf {\n    productGroupID\n    name\n  }\n  image {\n    url\n    alternateName\n  }\n  brand {\n    name\n  }\n  offers {\n    lowPrice\n    offers {\n      availability\n      price\n      listPrice\n      seller {\n        identifier\n      }\n    }\n  }\n  breadcrumbList {\n    ...Breadcrumb_breadcrumbList\n  }\n  additionalProperty {\n    propertyID\n    name\n    value\n    valueReference\n  }\n}"): (typeof documents)["fragment ProductDetails_product on StoreProduct {\n  id: productID\n  sku\n  name\n  gtin\n  description\n  isVariantOf {\n    productGroupID\n    name\n  }\n  image {\n    url\n    alternateName\n  }\n  brand {\n    name\n  }\n  offers {\n    lowPrice\n    offers {\n      availability\n      price\n      listPrice\n      seller {\n        identifier\n      }\n    }\n  }\n  breadcrumbList {\n    ...Breadcrumb_breadcrumbList\n  }\n  additionalProperty {\n    propertyID\n    name\n    value\n    valueReference\n  }\n}"];
export function gql(source: "\n  query GetProduct($locator: [IStoreSelectedFacet!]!) {\n    product(locator: $locator) {\n      id: productID\n\n      seo {\n        title\n        description\n        canonical\n      }\n\n      breadcrumbList {\n        itemListElement {\n          item\n          name\n          position\n        }\n      }\n\n      brand {\n        name\n      }\n\n      sku\n      gtin\n      name\n      description\n\n      image {\n        url\n        alternateName\n      }\n\n      offers {\n        lowPrice\n        highPrice\n        priceCurrency\n        offers {\n          availability\n          price\n          priceValidUntil\n          priceCurrency\n          itemCondition\n          seller {\n            identifier\n          }\n        }\n      }\n\n      isVariantOf {\n        productGroupID\n      }\n\n      ...ProductDetails_product\n    }\n  }\n"): (typeof documents)["\n  query GetProduct($locator: [IStoreSelectedFacet!]!) {\n    product(locator: $locator) {\n      id: productID\n\n      seo {\n        title\n        description\n        canonical\n      }\n\n      breadcrumbList {\n        itemListElement {\n          item\n          name\n          position\n        }\n      }\n\n      brand {\n        name\n      }\n\n      sku\n      gtin\n      name\n      description\n\n      image {\n        url\n        alternateName\n      }\n\n      offers {\n        lowPrice\n        highPrice\n        priceCurrency\n        offers {\n          availability\n          price\n          priceValidUntil\n          priceCurrency\n          itemCondition\n          seller {\n            identifier\n          }\n        }\n      }\n\n      isVariantOf {\n        productGroupID\n      }\n\n      ...ProductDetails_product\n    }\n  }\n"];

export function gql(source: string): unknown;
export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;